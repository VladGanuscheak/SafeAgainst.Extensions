name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner-${{ hashFiles('**/global.json', '**/*.csproj') }}
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          if (Test-Path -Path .sonar/scanner) { 
            Write-Host ".sonar/scanner already exists"
          } else {
            mkdir .sonar/scanner
          }
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Prepare SonarCloud analysis
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"VladGanuscheak_SafeAgainst.Extensions" /o:"vlad-ganuscheak" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.exclusions="**/obj/**,**/*.dll" /d:sonar.cs.xunit.reportsPaths="${{ runner.temp }}/XUnit.TestResults.xml" /d:sonar.cs.opencover.reportsPaths="${{ runner.temp }}/coverage.opencover.xml"

      - name: Build the solution
        run: |
          dotnet restore ./SafeAgainst.Extensions/SafeAgainst.Extensions.sln
          dotnet build ./SafeAgainst.Extensions/SafeAgainst.Extensions.sln --configuration Release --no-restore /p:ContinuousIntegrationBuild=true --no-incremental

      - name: Install coverlet tool
        run: dotnet tool install --global coverlet.console

      - name: Run tests and generate coverage report
        run: |
          dotnet test ./SafeAgainst.Extensions/SafeAgainst.Extensions.sln --configuration Release --no-build --logger "trx" --results-directory "${{ runner.temp }}" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="${{ runner.temp }}/coverage.opencover.xml"

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ runner.temp }}/coverage.opencover.xml

      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: ${{ runner.temp }}

      - name: Run SonarCloud analysis
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
